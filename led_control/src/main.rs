//! # Hardware Check
//!
//! This `libstd` program is for the ESP32-C3-DevKitC-02 board.

// Logging macros

use log::*;

// And alias for our Board Support Crate
use esp32_c3_dkc02_bsc as bsc;

// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;
use esp_idf_sys::{
    c_types::c_void, esp, rmt_config, rmt_config_t, rmt_config_t__bindgen_ty_1, rmt_driver_install,
    rmt_get_counter_clock, rmt_item32_t, rmt_item32_s__bindgen_ty_1,
    rmt_item32_s__bindgen_ty_1__bindgen_ty_1, rmt_mode_t_RMT_MODE_TX, rmt_translator_init,
    rmt_tx_config_t, rmt_wait_tx_done, rmt_write_sample, size_t, u_int8_t,
    ledc_timer_config_t, ledc_mode_t, ledc_mode_t_LEDC_LOW_SPEED_MODE, ledc_timer_config_t__bindgen_ty_1,
    ledc_timer_bit_t,ledc_timer_bit_t_LEDC_TIMER_13_BIT, ledc_timer_t_LEDC_TIMER_1, ledc_clk_cfg_t_LEDC_AUTO_CLK,
    ledc_timer_config, ledc_channel_config_t, ledc_channel_t_LEDC_CHANNEL_0, ledc_channel_config_t__bindgen_ty_1,
    ledc_intr_type_t_LEDC_INTR_DISABLE, ledc_channel_config,ledc_fade_func_install, ledc_set_duty,
    ledc_update_duty

};
/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

/// Entry point to our application.
///
/// It sets up a Wi-Fi connection to the Access Point given in the
/// configuration, then blinks the RGB LED green/blue.
///
/// If the LED goes solid red, then it was unable to connect to your Wi-Fi
/// network.
fn main() -> anyhow::Result<()> {
    use bsc::led::RGB8;

    esp_idf_sys::link_patches();

    /*
     * Prepare and set configuration of timers
     * that will be used by LED Controller
     */
    let led_timer_config =  ledc_timer_config_t{
        __bindgen_anon_1: ledc_timer_config_t__bindgen_ty_1{duty_resolution : ledc_timer_bit_t_LEDC_TIMER_13_BIT},
        freq_hz: 1000,
        speed_mode: ledc_mode_t_LEDC_LOW_SPEED_MODE,
        timer_num: ledc_timer_t_LEDC_TIMER_1,
        clk_cfg: ledc_clk_cfg_t_LEDC_AUTO_CLK,
    };
    unsafe{
        esp!(ledc_timer_config(&led_timer_config));
    }

    let lec_channel_config = ledc_channel_config_t{
        channel    : ledc_channel_t_LEDC_CHANNEL_0,
        duty       : 0,
        gpio_num   : 2,
        speed_mode : ledc_mode_t_LEDC_LOW_SPEED_MODE,
        hpoint     : 0,
        timer_sel  : ledc_timer_t_LEDC_TIMER_1,
        flags : ledc_channel_config_t__bindgen_ty_1{__bindgen_padding_0 : [0,0,0],
            _bitfield_1 :  Default::default(),
            _bitfield_align_1 : []},
        intr_type: ledc_intr_type_t_LEDC_INTR_DISABLE,
    };

    unsafe{
        esp!(ledc_channel_config(&lec_channel_config));
        esp!(ledc_fade_func_install(0));
        esp!(ledc_set_duty(ledc_mode_t_LEDC_LOW_SPEED_MODE, ledc_channel_t_LEDC_CHANNEL_0, 4000));
        esp!(ledc_update_duty(ledc_mode_t_LEDC_LOW_SPEED_MODE, ledc_channel_t_LEDC_CHANNEL_0));
    }



    println!("Hello, world!");
   // info!();

    // Start the LED off yellow
    let mut led = bsc::led::WS2812RMT::new()?;
    led.set_pixel(RGB8::new(50, 50, 0))?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match bsc::wifi::wifi(app_config.wifi_ssid, app_config.wifi_psk) {
        Ok(inner) => inner,
        Err(err) => {
            // Red!
            led.set_pixel(RGB8::new(50, 0, 0))?;
            anyhow::bail!("could not connect to Wi-Fi network: {:?}", err)
        }
    };

    loop {
        // Blue!
        led.set_pixel(RGB8::new(0, 0, 50))?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
        println!("Hello, world!");

        // Green
        led.set_pixel(RGB8::new(0, 50, 0))?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}
