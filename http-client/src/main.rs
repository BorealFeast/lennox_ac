use anyhow::{bail, Result};
use core::str;
use embedded_svc::{
    http::{client::Client, Status},
    io::Read,
};
use esp_idf_hal::prelude::Peripherals;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    http::client::{Configuration, EspHttpConnection},
};
use wifi::wifi;

// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    get("http://neverssl.com/")?;
    // TODO your code here
    get("http://neverssl.com/")?;

    get("https://espressif.com/")?;

    Ok(())
}

fn get(url: impl AsRef<str>) -> anyhow::Result<()> {
    // 1. Create a new EspHttpClient. (Check documentation)

    let mut client = EspHttpClient::new(&EspHttpClientConfiguration {
        use_global_ca_store: true,
        crt_bundle_attach: Some(esp_idf_sys::esp_crt_bundle_attach),
        ..Default::default()
    })?;
    let request = client.get(url.as_ref())?;
    // the parameter passed to `into_writer` is the number of bytes
    // the client intends to send
    let writer = request.into_writer(0)?;
    let response = writer.into_response()?;

    let status = response.status();
    let mut total_size: u16 = 0;

    match status {
        200..=299 => {
            // 5. if the status is OK, read response data chunk by chunk into a buffer and print it until done
            let mut buf = [0_u8; 256];
            let mut reader = response.reader();
            loop {
                if let Ok(size) = reader.do_read(&mut buf) {
                    if size == 0 {
                        break;
                    }
                    total_size += (size as u16);
                    // 6. try converting the bytes into a Rust (UTF-8) string and print it
                    let response_text = str::from_utf8(&buf[..size])?;
                    println!("{}", response_text);
                } else {
                    anyhow::bail!("Error reading message bytes");
                }
            }
        }
        _ => anyhow::bail!("unexpected response code: {}", status),
    }

    println!("Total size {}", total_size);

    // 2. Open a GET request to `url`

    // 2. Get a client using the Client::wrap method. (Check documentation)

    // 3. Open a GET request to `url`

    // 4. Submit the request and check the status code of the response.
    // let response = request...;
    // let status = ...;
    // println!("Response code: {}\n", status);
    // match status {
    // Successful http status codes are in the 200..=299 range.

    // 5. If the status is OK, read response data chunk by chunk into a buffer and print it until done.

    // 6. Try converting the bytes into a Rust (UTF-8) string and print it.
    // }

    Ok(())
}
